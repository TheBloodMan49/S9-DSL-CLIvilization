/******************************************************************************
 * This file was generated by langium-cli 4.1.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import * as langium from 'langium';

export const ClIvilizationTerminals = {
    COLOR: /#[0-9a-fA-F]{6}/,
    ID: /([a-z]|[A-Z]|[À-ÿ]|_)([a-z]|[A-Z]|[À-ÿ]|[0-9]|_)*/,
    INT: /([0-9])+/,
    STRING: /"(\\(?:[\s\S])|(?:(?!(\\|"))[\s\S]*?))*"/,
    ML_COMMENT: /\/\*(?:[\s\S]*?\*\/)/,
    SL_COMMENT: /\/\/(?:(?!(\n|\r))[\s\S]*?)*(\r?\n)?/,
    WS: /( |	|\r|\n)+/,
};

export type ClIvilizationTerminalNames = keyof typeof ClIvilizationTerminals;

export type ClIvilizationKeywordNames =
    | ","
    | "="
    | "AI"
    | "PLAYER"
    | "["
    | "[buildings]"
    | "[cities]"
    | "[game]"
    | "[size]"
    | "[units]"
    | "[victory_conditions]"
    | "]"
    | "amount"
    | "attack"
    | "blacklist_buildings"
    | "blacklist_units"
    | "build_time"
    | "civilization"
    | "color"
    | "cost"
    | "current_turn"
    | "id_building"
    | "id_units"
    | "level"
    | "nb_slots_buildings"
    | "nb_slots_units"
    | "nb_turns"
    | "player_type"
    | "prerequisites"
    | "production"
    | "resources_spent"
    | "slots"
    | "starting_buildings"
    | "starting_resources"
    | "starting_units"
    | "time"
    | "type"
    | "ui_color"
    | "whitelist_buildings"
    | "whitelist_units"
    | "x"
    | "y"
    | "{"
    | "}";

export type ClIvilizationTokenNames = ClIvilizationTerminalNames | ClIvilizationKeywordNames;

export interface BuildingDef extends langium.AstNode {
    readonly $container: BuildingDefArray;
    readonly $type: 'BuildingDef';
    buildTime: number;
    cost: number;
    name: Value;
    prerequisites: PrereqArray;
    production: Production;
    slots: number;
}

export const BuildingDef = {
    $type: 'BuildingDef',
    buildTime: 'buildTime',
    cost: 'cost',
    name: 'name',
    prerequisites: 'prerequisites',
    production: 'production',
    slots: 'slots'
} as const;

export function isBuildingDef(item: unknown): item is BuildingDef {
    return reflection.isInstance(item, BuildingDef.$type);
}

export interface BuildingDefArray extends langium.AstNode {
    readonly $container: Model;
    readonly $type: 'BuildingDefArray';
    buildings: Array<BuildingDef>;
}

export const BuildingDefArray = {
    $type: 'BuildingDefArray',
    buildings: 'buildings'
} as const;

export function isBuildingDefArray(item: unknown): item is BuildingDefArray {
    return reflection.isInstance(item, BuildingDefArray.$type);
}

export interface BuildingInstance extends langium.AstNode {
    readonly $container: BuildingInstanceArray;
    readonly $type: 'BuildingInstance';
    id_building: number;
    level: number;
}

export const BuildingInstance = {
    $type: 'BuildingInstance',
    id_building: 'id_building',
    level: 'level'
} as const;

export function isBuildingInstance(item: unknown): item is BuildingInstance {
    return reflection.isInstance(item, BuildingInstance.$type);
}

export interface BuildingInstanceArray extends langium.AstNode {
    readonly $container: City;
    readonly $type: 'BuildingInstanceArray';
    elements: Array<BuildingInstance>;
}

export const BuildingInstanceArray = {
    $type: 'BuildingInstanceArray',
    elements: 'elements'
} as const;

export function isBuildingInstanceArray(item: unknown): item is BuildingInstanceArray {
    return reflection.isInstance(item, BuildingInstanceArray.$type);
}

export interface Cities extends langium.AstNode {
    readonly $container: Model;
    readonly $type: 'Cities';
    cities: Array<City>;
}

export const Cities = {
    $type: 'Cities',
    cities: 'cities'
} as const;

export function isCities(item: unknown): item is Cities {
    return reflection.isInstance(item, Cities.$type);
}

export interface City extends langium.AstNode {
    readonly $container: Cities;
    readonly $type: 'City';
    blacklist_buildings?: IntArray;
    blacklist_units?: IntArray;
    buildings: BuildingInstanceArray;
    civilization: Value;
    color: string;
    name: Value;
    nbSlotsBuildings: number;
    nbSlotsUnits: number;
    playerType: PlayerType;
    startingResources: number;
    units: UnitInstanceArray;
    whitelist_buildings?: IntArray;
    whitelist_units?: IntArray;
    x: number;
    y: number;
}

export const City = {
    $type: 'City',
    blacklist_buildings: 'blacklist_buildings',
    blacklist_units: 'blacklist_units',
    buildings: 'buildings',
    civilization: 'civilization',
    color: 'color',
    name: 'name',
    nbSlotsBuildings: 'nbSlotsBuildings',
    nbSlotsUnits: 'nbSlotsUnits',
    playerType: 'playerType',
    startingResources: 'startingResources',
    units: 'units',
    whitelist_buildings: 'whitelist_buildings',
    whitelist_units: 'whitelist_units',
    x: 'x',
    y: 'y'
} as const;

export function isCity(item: unknown): item is City {
    return reflection.isInstance(item, City.$type);
}

export interface Game extends langium.AstNode {
    readonly $container: Model;
    readonly $type: 'Game';
    currentTurn: number;
    uiColor: string;
}

export const Game = {
    $type: 'Game',
    currentTurn: 'currentTurn',
    uiColor: 'uiColor'
} as const;

export function isGame(item: unknown): item is Game {
    return reflection.isInstance(item, Game.$type);
}

export interface IntArray extends langium.AstNode {
    readonly $container: City;
    readonly $type: 'IntArray';
    values: Array<number>;
}

export const IntArray = {
    $type: 'IntArray',
    values: 'values'
} as const;

export function isIntArray(item: unknown): item is IntArray {
    return reflection.isInstance(item, IntArray.$type);
}

export interface Model extends langium.AstNode {
    readonly $type: 'Model';
    sections: Array<Section>;
}

export const Model = {
    $type: 'Model',
    sections: 'sections'
} as const;

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model.$type);
}

export type PlayerType = 'AI' | 'PLAYER';

export function isPlayerType(item: unknown): item is PlayerType {
    return item === 'PLAYER' || item === 'AI';
}

export interface Prereq extends langium.AstNode {
    readonly $container: PrereqArray;
    readonly $type: 'Prereq';
    id_building: string;
}

export const Prereq = {
    $type: 'Prereq',
    id_building: 'id_building'
} as const;

export function isPrereq(item: unknown): item is Prereq {
    return reflection.isInstance(item, Prereq.$type);
}

export interface PrereqArray extends langium.AstNode {
    readonly $container: BuildingDef;
    readonly $type: 'PrereqArray';
    prereqs: Array<Prereq>;
}

export const PrereqArray = {
    $type: 'PrereqArray',
    prereqs: 'prereqs'
} as const;

export function isPrereqArray(item: unknown): item is PrereqArray {
    return reflection.isInstance(item, PrereqArray.$type);
}

export interface Production extends langium.AstNode {
    readonly $container: BuildingDef;
    readonly $type: 'Production';
    amount: number;
    cost: number;
    prodType: Value;
    prodUnitId: number;
    time: number;
}

export const Production = {
    $type: 'Production',
    amount: 'amount',
    cost: 'cost',
    prodType: 'prodType',
    prodUnitId: 'prodUnitId',
    time: 'time'
} as const;

export function isProduction(item: unknown): item is Production {
    return reflection.isInstance(item, Production.$type);
}

export type Section = BuildingDefArray | Cities | Game | Size | UnitDefArray | VictoryConditions;

export const Section = {
    $type: 'Section'
} as const;

export function isSection(item: unknown): item is Section {
    return reflection.isInstance(item, Section.$type);
}

export interface Size extends langium.AstNode {
    readonly $container: Model;
    readonly $type: 'Size';
    x: number;
    y: number;
}

export const Size = {
    $type: 'Size',
    x: 'x',
    y: 'y'
} as const;

export function isSize(item: unknown): item is Size {
    return reflection.isInstance(item, Size.$type);
}

export interface UnitDef extends langium.AstNode {
    readonly $container: UnitDefArray;
    readonly $type: 'UnitDef';
    attack: number;
    name: Value;
}

export const UnitDef = {
    $type: 'UnitDef',
    attack: 'attack',
    name: 'name'
} as const;

export function isUnitDef(item: unknown): item is UnitDef {
    return reflection.isInstance(item, UnitDef.$type);
}

export interface UnitDefArray extends langium.AstNode {
    readonly $container: Model;
    readonly $type: 'UnitDefArray';
    units: Array<UnitDef>;
}

export const UnitDefArray = {
    $type: 'UnitDefArray',
    units: 'units'
} as const;

export function isUnitDefArray(item: unknown): item is UnitDefArray {
    return reflection.isInstance(item, UnitDefArray.$type);
}

export interface UnitInstance extends langium.AstNode {
    readonly $container: UnitInstanceArray;
    readonly $type: 'UnitInstance';
    id_units: number;
}

export const UnitInstance = {
    $type: 'UnitInstance',
    id_units: 'id_units'
} as const;

export function isUnitInstance(item: unknown): item is UnitInstance {
    return reflection.isInstance(item, UnitInstance.$type);
}

export interface UnitInstanceArray extends langium.AstNode {
    readonly $container: City;
    readonly $type: 'UnitInstanceArray';
    units: Array<UnitInstance>;
}

export const UnitInstanceArray = {
    $type: 'UnitInstanceArray',
    units: 'units'
} as const;

export function isUnitInstanceArray(item: unknown): item is UnitInstanceArray {
    return reflection.isInstance(item, UnitInstanceArray.$type);
}

export type Value = string;

export function isValue(item: unknown): item is Value {
    return (typeof item === 'string' && (/"(\\(?:[\s\S])|(?:(?!(\\|"))[\s\S]*?))*"/.test(item) || /([a-z]|[A-Z]|[À-ÿ]|_)([a-z]|[A-Z]|[À-ÿ]|[0-9]|_)*/.test(item)));
}

export interface VictoryConditions extends langium.AstNode {
    readonly $container: Model;
    readonly $type: 'VictoryConditions';
    nbTurns: number;
    resourcesSpent: number;
}

export const VictoryConditions = {
    $type: 'VictoryConditions',
    nbTurns: 'nbTurns',
    resourcesSpent: 'resourcesSpent'
} as const;

export function isVictoryConditions(item: unknown): item is VictoryConditions {
    return reflection.isInstance(item, VictoryConditions.$type);
}

export type ClIvilizationAstType = {
    BuildingDef: BuildingDef
    BuildingDefArray: BuildingDefArray
    BuildingInstance: BuildingInstance
    BuildingInstanceArray: BuildingInstanceArray
    Cities: Cities
    City: City
    Game: Game
    IntArray: IntArray
    Model: Model
    Prereq: Prereq
    PrereqArray: PrereqArray
    Production: Production
    Section: Section
    Size: Size
    UnitDef: UnitDef
    UnitDefArray: UnitDefArray
    UnitInstance: UnitInstance
    UnitInstanceArray: UnitInstanceArray
    VictoryConditions: VictoryConditions
}

export class ClIvilizationAstReflection extends langium.AbstractAstReflection {
    override readonly types = {
        BuildingDef: {
            name: BuildingDef.$type,
            properties: {
                buildTime: {
                    name: BuildingDef.buildTime
                },
                cost: {
                    name: BuildingDef.cost
                },
                name: {
                    name: BuildingDef.name
                },
                prerequisites: {
                    name: BuildingDef.prerequisites
                },
                production: {
                    name: BuildingDef.production
                },
                slots: {
                    name: BuildingDef.slots
                }
            },
            superTypes: []
        },
        BuildingDefArray: {
            name: BuildingDefArray.$type,
            properties: {
                buildings: {
                    name: BuildingDefArray.buildings,
                    defaultValue: []
                }
            },
            superTypes: [Section.$type]
        },
        BuildingInstance: {
            name: BuildingInstance.$type,
            properties: {
                id_building: {
                    name: BuildingInstance.id_building
                },
                level: {
                    name: BuildingInstance.level
                }
            },
            superTypes: []
        },
        BuildingInstanceArray: {
            name: BuildingInstanceArray.$type,
            properties: {
                elements: {
                    name: BuildingInstanceArray.elements,
                    defaultValue: []
                }
            },
            superTypes: []
        },
        Cities: {
            name: Cities.$type,
            properties: {
                cities: {
                    name: Cities.cities,
                    defaultValue: []
                }
            },
            superTypes: [Section.$type]
        },
        City: {
            name: City.$type,
            properties: {
                blacklist_buildings: {
                    name: City.blacklist_buildings
                },
                blacklist_units: {
                    name: City.blacklist_units
                },
                buildings: {
                    name: City.buildings
                },
                civilization: {
                    name: City.civilization
                },
                color: {
                    name: City.color
                },
                name: {
                    name: City.name
                },
                nbSlotsBuildings: {
                    name: City.nbSlotsBuildings
                },
                nbSlotsUnits: {
                    name: City.nbSlotsUnits
                },
                playerType: {
                    name: City.playerType
                },
                startingResources: {
                    name: City.startingResources
                },
                units: {
                    name: City.units
                },
                whitelist_buildings: {
                    name: City.whitelist_buildings
                },
                whitelist_units: {
                    name: City.whitelist_units
                },
                x: {
                    name: City.x
                },
                y: {
                    name: City.y
                }
            },
            superTypes: []
        },
        Game: {
            name: Game.$type,
            properties: {
                currentTurn: {
                    name: Game.currentTurn
                },
                uiColor: {
                    name: Game.uiColor
                }
            },
            superTypes: [Section.$type]
        },
        IntArray: {
            name: IntArray.$type,
            properties: {
                values: {
                    name: IntArray.values,
                    defaultValue: []
                }
            },
            superTypes: []
        },
        Model: {
            name: Model.$type,
            properties: {
                sections: {
                    name: Model.sections,
                    defaultValue: []
                }
            },
            superTypes: []
        },
        Prereq: {
            name: Prereq.$type,
            properties: {
                id_building: {
                    name: Prereq.id_building
                }
            },
            superTypes: []
        },
        PrereqArray: {
            name: PrereqArray.$type,
            properties: {
                prereqs: {
                    name: PrereqArray.prereqs,
                    defaultValue: []
                }
            },
            superTypes: []
        },
        Production: {
            name: Production.$type,
            properties: {
                amount: {
                    name: Production.amount
                },
                cost: {
                    name: Production.cost
                },
                prodType: {
                    name: Production.prodType
                },
                prodUnitId: {
                    name: Production.prodUnitId
                },
                time: {
                    name: Production.time
                }
            },
            superTypes: []
        },
        Section: {
            name: Section.$type,
            properties: {
            },
            superTypes: []
        },
        Size: {
            name: Size.$type,
            properties: {
                x: {
                    name: Size.x
                },
                y: {
                    name: Size.y
                }
            },
            superTypes: [Section.$type]
        },
        UnitDef: {
            name: UnitDef.$type,
            properties: {
                attack: {
                    name: UnitDef.attack
                },
                name: {
                    name: UnitDef.name
                }
            },
            superTypes: []
        },
        UnitDefArray: {
            name: UnitDefArray.$type,
            properties: {
                units: {
                    name: UnitDefArray.units,
                    defaultValue: []
                }
            },
            superTypes: [Section.$type]
        },
        UnitInstance: {
            name: UnitInstance.$type,
            properties: {
                id_units: {
                    name: UnitInstance.id_units
                }
            },
            superTypes: []
        },
        UnitInstanceArray: {
            name: UnitInstanceArray.$type,
            properties: {
                units: {
                    name: UnitInstanceArray.units,
                    defaultValue: []
                }
            },
            superTypes: []
        },
        VictoryConditions: {
            name: VictoryConditions.$type,
            properties: {
                nbTurns: {
                    name: VictoryConditions.nbTurns
                },
                resourcesSpent: {
                    name: VictoryConditions.resourcesSpent
                }
            },
            superTypes: [Section.$type]
        }
    } as const satisfies langium.AstMetaData
}

export const reflection = new ClIvilizationAstReflection();
